(* Interactive lang transpiler ? :-) *)

structure Ast = StarAst

%%

%eop EOF SEMI

(* %pos declares the type of positions for terminals.
   Each symbol has an associated left and right position. *)

%pos int

%left AND OR
%left GE GT LE LT NEQ EQ 
%left SUB PLUS
%left TIMES DIV
%right CARAT

%term ID of string | NUM of int | STRING of string
      | PLUS | TIMES | PRINT | COMMA
      | SEMI | EOF | CARAT | DIV | SUB
      | AND | OR | EQ | ASSIGN
      | GE | GT | LE | LT | NEQ
      | LBRACE | RBRACE | LPAREN | RPAREN
      | VAR | FUNCTION | BREAK | CONTINUE
      | WHILE | ELSE | IF | RETURN | BOGUS
      | END | JS

%nonterm exp_                 of Ast.Exp_
        | start               of Ast.Start_ option
        | if_                 of Ast.Stmt_
        | function_           of Ast.Function_
        | params_             of string list
        | body_               of Ast.Body_
        | bool_               of Ast.Bool_
        | comparison_         of Ast.RelOp_
        | assignment_         of Ast.Stmt_
        | while_              of Ast.Stmt_
        | print_              of Ast.Stmt_
        | program_            of Ast.Prog_
        | stm_                of Ast.Stmt_
        | functionCallParams_ of Ast.Exp_ list
        | functionCall_       of Ast.Exp_
        | logic_              of Ast.LoOp_
        | arOp_               of Ast.ArOp_

%name Star

%prefer PLUS TIMES DIV SUB LPAREN
%keyword WHILE BREAK CONTINUE RETURN FUNCTION VAR IF ELSE PRINT SEMI END

%noshift EOF
%value NUM (1)
%value STRING ("")
%verbose

%%

(* the parser returns the value associated with the exp_ression *)

  start : program_                                                              (SOME (Ast.Prog(program_, program_left, program_right)))
  
  program_ : function_ program_                                                 (Ast.ProgPart1(function_, program_, function_left, function_right))
           | stm_ program_                                                      (Ast.ProgPart2(stm_, program_, stm_left, stm_right))
           | END                                                                (Ast.END(ENDleft, ENDright))
  
 stm_ : VAR ID ASSIGN exp_                                                      (Ast.AssStmt(ID, exp_, VARleft, VARright))
       | IF LPAREN bool_ RPAREN LBRACE body_ RBRACE                             (Ast.IfStmt(bool_, body_, IFleft, IFright))
       | IF LPAREN bool_ RPAREN LBRACE body_ RBRACE ELSE LBRACE body_ RBRACE    (Ast.IfElseStmt(bool_, body_1, body_2, IFleft, IFright))
       | WHILE LPAREN bool_ RPAREN LBRACE body_ RBRACE                          (Ast.WhileStmt(bool_, body_, WHILEleft, WHILEright))
       | PRINT LPAREN exp_ RPAREN                                               (Ast.PrintStmt(exp_, PRINTleft, PRINTright))
       | BREAK                                                                  (Ast.BREAK(BREAKleft, BREAKright)) 
       | CONTINUE                                                               (Ast.CONTINUE(CONTINUEleft, CONTINUEright)) 
       | RETURN                                                                 (Ast.RETURN(RETURNleft, RETURNright)) 

  functionCallParams_ : ([]) | exp_ ([exp_]) | exp_ COMMA functionCallParams_ (exp_::functionCallParams_)

  exp_ : NUM                                                                    (Ast.IntExp(NUM, NUMleft, NUMright))
        | STRING                                                                (Ast.StringExp(STRING, STRINGleft, STRINGright))
        | ID                                                                    (Ast.IdExp(ID, IDleft, IDright))
        | ID LPAREN functionCallParams_ RPAREN                                  (Ast.CallExp(ID, functionCallParams_, IDleft, IDright))
        | LPAREN exp_ RPAREN                                                    (exp_)
        | exp_ arOp_ exp_                                                       (Ast.OpExp(exp_1, arOp_, exp_2, exp_1left, exp_2right))
        | JS LPAREN exp_ RPAREN                                                 (Ast.JsExp(exp_, JSleft, JSright))

  arOp_ : PLUS                                                                  (Ast.Plus(PLUSleft, PLUSright)) 
        | TIMES                                                                 (Ast.Times(TIMESleft, TIMESright)) 
        | DIV                                                                   (Ast.Divide(DIVleft, DIVright)) 
        | SUB                                                                   (Ast.Sub(SUBleft, SUBright)) 
        | CARAT                                                                 (Ast.Carat(CARATleft, CARATright)) 
  
  body_ : stm_ body_                                                            (Ast.StmtList(stm_, body_, stm_left, stm_right))
        | stm_                                                                  (Ast.StmtLast(stm_, stm_left, stm_right))

  comparison_ : GE                                                              (Ast.GeOp(GEleft, GEright)) 
              | GT                                                              (Ast.GtOp(GTleft, GTright)) 
              | LE                                                              (Ast.LeOp(LEleft, LEright)) 
              | LT                                                              (Ast.LtOp(LTleft, LTright)) 
              | NEQ                                                             (Ast.NeqOp(NEQleft, NEQright)) 
              | EQ                                                              (Ast.EqOp(EQleft, EQright))

  logic_ : AND                                                                  (Ast.AND(ANDleft, ANDright)) 
         | OR                                                                   (Ast.OR(ORleft, ORright))

  bool_ : exp_ comparison_ exp_                                                 (Ast.BoolExp2(exp_1, comparison_, exp_2, exp_1left, exp_1right))
        | bool_ logic_ bool_                                                    (Ast.BoolExp3(bool_1, logic_, bool_2, bool_1left, bool_1right))

  params_ : ([]) | ID ([ID]) | ID COMMA params_ (ID::params_)

  function_ : FUNCTION ID LPAREN params_ RPAREN LBRACE body_ RBRACE             (Ast.Function(ID, params_, body_, FUNCTIONleft, FUNCTIONright))


